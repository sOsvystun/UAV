version: '3.8'

services:
  # Gateway Service
  gateway:
    build:
      context: .
      dockerfile: services/gateway/Dockerfile
    ports:
      - "50051:50051"  # gRPC
      - "9090:9090"    # Metrics
    environment:
      - UAV_ENVIRONMENT=development
      - UAV_GATEWAY_SERVER_HOST=0.0.0.0
      - UAV_GATEWAY_SERVER_PORT=50051
      - UAV_GATEWAY_METRICS_PORT=9090
      - UAV_GATEWAY_LOGGING_LEVEL=info
    depends_on:
      - trajectory-service
      - detection-service
      - criticality-service
      - reporting-service
      - postgres
      - jaeger
    networks:
      - uav-network

  # Trajectory Planning Service
  trajectory-service:
    build:
      context: .
      dockerfile: services/trajectory/Dockerfile
    ports:
      - "50052:50051"
    environment:
      - UAV_ENVIRONMENT=development
      - UAV_TRAJECTORY_SERVER_PORT=50051
      - UAV_TRAJECTORY_DATABASE_URL=postgresql://uav_user:uav_password@postgres:5432/uav_trajectory
    depends_on:
      - postgres
    networks:
      - uav-network

  # Defect Detection Service
  detection-service:
    build:
      context: .
      dockerfile: services/detection/Dockerfile
    ports:
      - "50053:50051"
    environment:
      - UAV_ENVIRONMENT=development
      - UAV_DETECTION_SERVER_PORT=50051
      - UAV_DETECTION_MODEL_PATH=/app/models
    volumes:
      - ./models:/app/models:ro
      - ./data/images:/app/data/images
    networks:
      - uav-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Criticality Assessment Service
  criticality-service:
    build:
      context: .
      dockerfile: services/criticality/Dockerfile
    ports:
      - "50054:50051"
    environment:
      - UAV_ENVIRONMENT=development
      - UAV_CRITICALITY_SERVER_PORT=50051
      - UAV_CRITICALITY_DATABASE_URL=postgresql://uav_user:uav_password@postgres:5432/uav_criticality
    depends_on:
      - postgres
    networks:
      - uav-network

  # Reporting Service
  reporting-service:
    build:
      context: .
      dockerfile: services/reporting/Dockerfile
    ports:
      - "50055:50051"
    environment:
      - UAV_ENVIRONMENT=development
      - UAV_REPORTING_SERVER_PORT=50051
      - UAV_REPORTING_DATABASE_URL=postgresql://uav_user:uav_password@postgres:5432/uav_reporting
      - UAV_REPORTING_STORAGE_PATH=/app/reports
    volumes:
      - ./data/reports:/app/reports
    depends_on:
      - postgres
    networks:
      - uav-network

  # Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=uav_main
      - POSTGRES_USER=uav_user
      - POSTGRES_PASSWORD=uav_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - uav-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - uav-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - uav-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:10.1.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - uav-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - uav-network

  # MinIO for object storage (images, reports)
  minio:
    image: minio/minio:RELEASE.2023-10-07T15-07-38Z
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - uav-network

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  redis_data:
  minio_data:

networks:
  uav-network:
    driver: bridge